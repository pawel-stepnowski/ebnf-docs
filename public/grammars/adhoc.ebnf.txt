rule_0 = ([ "a" ] , (/ "a" /)), ({ "b" }, (: "b" :)), ('c' | "c" ! 'c' / "c") (* comment *), (* special *) ? /\s+/ ? (* sequence *).
(* rule_1 = ([ "a" ] , ); *)
value = "true" | "false";
digit = "0" | "1" (* comment a *) | (* comment b *) (* comment c *) "2";
number = digit (* before *) + (* after *);
digit_without_one = digit - (* inline comment x *) "1";
number_without_one = (* inline comment y *) (digit_without_one), (* inline comment y *) {digit_without_one};
comparison = "1", comparator, (* inline comment z *) "2";
(* sample comment *)
operator = "or" | "and" (* comment 1 *) ; (* comment 2 *)
operator_expression = operator, "(", {expression}, ")";
rule_a = ([ "a" ] , (/ "a" /)), ({ "b" }, (: "b" :)), ('c' | "c" ! 'c' / "c") (* comment *), (* special *) ? /\s+/ ? (* sequence *).
expression = value | operator_expression;